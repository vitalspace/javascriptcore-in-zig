---
import Layout from "../layouts/Layout.astro";
import { Prism } from "@astrojs/prism";
---

<Layout title="JavaScriptCore in Zig / Executing Zig Code with JavaScriptCore">
  <main class="container mx-auto flex flex-col gap-y-4 mb-2">
    <header class="xl:mx-96 mt-14 gap-y-4 flex flex-col">
      <a href="/javascriptcore-in-zig" class="text-purple-800">Back <</a>

      <h1 class="font-bold text-5xl">Executing Zig Code with JavaScriptCore</h1>
      <p class="text-sm">
        In this blog post, we'll delve into a code snippet that merges the Zig
        programming language with JavaScriptCore, a JavaScript engine library
        from WebKit. This fusion of languages offers the possibility of
        integrating JavaScript functionalities into applications developed in
        Zig.
      </p>

      <h2 class="text-lg">Code Breakdown</h2>
      <p class="text-sm">
        Let's explore the code step by step to understand its functionality and
        how Zig and JavaScriptCore intertwine.
      </p>

      <h3 class="text-lg">Imports and Initial Setup</h3>

      <p class="text-sm">
        The code begins with necessary imports in Zig, including the use of the
        standard library (std) and the definition of the printing function
        (print). It also imports the C interface of JavaScriptCore through
        @cImport, enabling interoperability with the C library.
      </p>
    </header>

    <div class="xl:mx-96 flex flex-col gap-y-4">
      <Prism
        lang="js"
        code={`// main.zig 
const std = @import("std");
const print = std.debug.print;

const jsc = @cImport({
    @cInclude("JavaScriptCore/JavaScript.h");
});`}
      />

      <h3 class="text-lg">Main Function</h3>
      <p class="text-sm">
        The main function (main) is responsible for executing the core logic of
        the program. First, it creates a Zig GeneralPurposeAllocator for memory
        management.
      </p>

      <Prism
        lang="js"
        code={`// main.zig 
pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    const allocator = gpa.allocator();`}
      />

      <h3 class="text-lg">Creating the JavaScript Context</h3>
      <p class="text-sm">
        Next, a JavaScript context is created using the JSGlobalContextCreate
        function provided by JavaScriptCore. This context will serve as the
        execution environment for JavaScript code.
      </p>
      <Prism
        lang="js"
        code={`// main.zig 
    const context: jsc.JSGlobalContextRef = jsc.JSGlobalContextCreate(null);`}
      />

      <h3 class="text-lg">Executing JavaScript Code</h3>
      <p class="text-sm">
        A JavaScript string is created and evaluated using the JSEvaluateScript
        function. In this case, the JavaScript code simply assigns a string
        value and then returns it.
      </p>
      <Prism
        lang="js"
        code={`// main.zig 
    const jsCode: jsc.JSStringRef = jsc.JSStringCreateWithUTF8CString("const some = 'hello world'; some");
    const result: jsc.JSValueRef = jsc.JSEvaluateScript(context, jsCode, null, null, 0, null);
    const jsString: jsc.JSStringRef = jsc.JSValueToStringCopy(context, result, null);`}
      />

      <h3 class="text-lg">
        Converting JavaScript String to Zig String and Printing
      </h3>
      <p class="text-sm">
        After the JavaScript result has been obtained, the code proceeds to
        allocate a buffer using Zig's allocator to store the converted string.
        This buffer is used to hold the result of converting the JavaScript
        string to a Zig string.
      </p>

      <Prism
        lang="js"
        code={`// main.zig 
    var buffer = try allocator.alloc(u8, jsc.JSStringGetMaximumUTF8CStringSize(jsString));
    defer allocator.free(buffer);`}
      />

      <p class="text-sm">
        The jsc.JSStringGetMaximumUTF8CStringSize(jsString) function is used to
        determine the maximum size required for the UTF-8 representation of the
        JavaScript string. The buffer is allocated accordingly, and a defer
        statement is used to ensure the buffer is freed once it goes out of
        scope.
      </p>
      <p class="text-sm">
        Next, the code retrieves the UTF-8 encoded string from the JavaScript
        string using jsc.JSStringGetUTF8CString. The resulting string is then
        printed using Zig's print function.
      </p>

      <Prism
        lang="js"
        code={`// main.zig 
    const string_length = jsc.JSStringGetUTF8CString(jsString, buffer.ptr, buffer.len);
    const string = buffer[0..string_length];
    print("{s}", .{string});`}
      />

      <p class="text-sm">
        This part of the code ensures that the JavaScript string is converted to
        a format that Zig can work with and is then printed to the console.
      </p>

      <h3 class="text-lg">Releasing Resources</h3>

      <p class="text-sm">
        Finally, the code releases the resources associated with the JavaScript
        string and the JavaScript context. This is important to prevent memory
        leaks.
      </p>
      <Prism
        lang="js"
        code={`// main.zig 
    jsc.JSStringRelease(jsString);
    jsc.JSGlobalContextRelease(context);`}
      />

      <p class="text-sm">
        Releasing the JavaScript string is essential to free the memory used by
        it, and releasing the JavaScript context is necessary to clean up the
        resources allocated for JavaScript execution.
      </p>

      <p class="text-sm">
        In summary, the complete code snippet demonstrates how to execute
        JavaScript code within a Zig program, convert the JavaScript result to a
        Zig string, and then print it. Additionally, it emphasizes the
        importance of releasing resources to maintain memory efficiency and
        avoid potential issues.
      </p>

      <h3 class="text-lg">Full Code</h3>

      <Prism
        lang="js"
        code={`// main.zig       
const std = @import("std");
const print = std.debug.print;

const c = @cImport({
    @cInclude("stdio.h");
});

const jsc = @cImport({
    @cInclude("JavaScriptCore/JavaScript.h");
});

pub fn main() !void {
    // Create a GeneralPurposeAllocator for memory allocation
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    const allocator = gpa.allocator();

    // Create a JavaScript context
    const context: jsc.JSGlobalContextRef = jsc.JSGlobalContextCreate(null);

    // Create a JavaScript string
    const jsCode: jsc.JSStringRef = jsc.JSStringCreateWithUTF8CString("const some = 'hello world'; some");

    // Evaluate the JavaScript code in the context
    const result: jsc.JSValueRef = jsc.JSEvaluateScript(context, jsCode, null, null, 0, null);

    // Convert the result to a string
    const jsString: jsc.JSStringRef = jsc.JSValueToStringCopy(context, result, null);

    // Allocate memory to store the string in UTF-8 format
    var buffer = try allocator.alloc(u8, jsc.JSStringGetMaximumUTF8CStringSize(jsString));
    defer allocator.free(buffer);

    // Get the string in UTF-8 format
    const string_length = jsc.JSStringGetUTF8CString(jsString, buffer.ptr, buffer.len);
    const string = buffer[0..string_length];

    // Print the string
    print("{s}", .{string});

    // Release resources
    jsc.JSStringRelease(jsString);
    jsc.JSGlobalContextRelease(context);
}`}
      />

      <h3 class="text-lg">Run Code</h3>

      <Prism
        lang="js"
        code={`zig run main.zig -I/usr/include/webkitgtk-4.0 -ljavascriptcoregtk-4.0 -lc`}
      />

      <p class="text-sm">
        I hope this extended explanation provides a more thorough understanding
        of the entire code, including the parts that were initially omitted.
      </p>
    </div>
  </main>
</Layout>
